{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,gFCAAC,EAAAD,EAAA,S,aAGO,SAASE,EAA2BC,GACzC,MAAO,uCAAuCA,EAAWC,uGAEZD,EAAWE,kEACbF,EAAWG,SAAW,0WAMnD,EAAAL,EAAAM,qBACAJ,EAAWC,aACXI,EAAAC,UAAUC,gG,4CCf1BC,EAAAX,EAAA,S,0BAKOY,eAAeC,EAAiBC,EAAYC,GACjD,MAAMC,GAAa,EAAAL,EAAAM,qBAAoBH,GAOvC,IALA,EAAAI,EAAAC,kCACEH,EAAWI,OACXC,EAAAC,YAAYC,wBAGY,IAAtBP,EAAWI,OACb,OAAO,EAEP,IACE,MAAMI,EAAY,GAClB,IAAK,MAAMC,KAAMT,EAAY,CAC3B,MAAMU,QAAiBX,EAASU,GAChCD,EAAUG,KAAKD,EAAS,G,CAE1B,OAAOF,C,CACP,MAAOI,GACPC,QAAQC,IAAIF,E,EFkGlB,SAASG,EAA0BC,GACN,IAAvBA,KACF,EAAAC,EAAAC,kBACEF,EACAX,EAAAC,YAAYa,kBACZjC,IAGF,EAAA+B,EAAAG,eACEJ,EACAX,EAAAC,YAAYa,kBACZjC,G,uBAnHNmC,OAAOC,iBAAiB,QAUxB1B,iBAGE,MAAM2B,QAAgC1B,EACpCL,EAAAC,UAAUC,wBACV8B,EAAAC,mBAGEF,GACFR,EAA0BQ,E,IAlB9BlB,EAAAC,YAAYa,kBAAkBG,iBAAiB,SAgC/C1B,eAAqC8B,GACnC,IAAKA,EAAEC,OAAOC,QAAQ,UAAW,OAEjC,MAAMC,EAAmBH,EAAEC,OAAOC,QAAQ,aACpCE,EAASD,EAAiBE,QAAQtB,GAE1BiB,EAAEC,OAAOC,QAAQ,kBAE7B,EAAAjC,EAAAqC,oBAAmBF,EAAQtC,EAAAC,UAAUC,yBACrCmC,EAAiBI,UAEnB,GAAIP,EAAEC,OAAOO,UAAUC,SAAS,eAAgB,CAC9C,MAAMC,QAAuB,EAAAZ,EAAAC,mBAAkBK,GACzCO,GAAyB,EAAAC,EAAAC,6BAA4BH,IAE3D,EAAAI,EAAAC,uBACEJ,EACAD,EAAe,GAAGhD,aAClBI,EAAAC,UAAUC,wB,CAGwC,IAAlDW,EAAAC,YAAYa,kBAAkBuB,SAAStC,QACzCuC,SAASC,Q,IArDbvC,EAAAC,YAAYuC,cAAcvB,iBACxB,UAwDF1B,eAA0C8B,GACxCA,EAAEoB,iBAEF,MAAMC,EAAcrB,EAAEC,OAAOqB,SAASC,OAAOC,MAAMC,OACnD,IAAKJ,EAEH,YADAK,EAAArE,GAASsE,OAAOC,QAAQ,0CAK1B,MAAMC,QAA8B1D,EAClCL,EAAAC,UAAUC,wBACV8B,EAAAC,mBAGF,GAAI8B,EAAuB,CACzB,MAAMC,EAA2BD,EAAsBE,QAAOC,GAC5DA,EAASrE,cAAcsE,cAAcC,SAASb,EAAYY,kBAG5D,EAAAzD,EAAA2D,iBACEL,EAAyBpD,OACzBC,EAAAC,YAAYa,kBACZd,EAAAC,YAAYwD,cAGd/C,EAA0ByC,E,MAE1BJ,EAAArE,GAASsE,OAAOU,KAAK,uC,IAjFzB1D,EAAAC,YAAY0D,mBAAmB1C,iBAAiB,UAAU","sources":["src/favIngridients.js","src/js/elementsMarkup/ingredientCard.js","src/js/elementsFav/getFavItems.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport './js/modals/mobileMenu';\nimport { constants } from './js/constantsStorage/constants';\nimport { getIngredientById } from './js/api/api';\nimport {\n  renderGallery,\n  createPagination,\n} from './js/elementsRender/renderGallery';\nimport { elementsRef } from './js/elementsRefs/references';\nimport { updateLocalStorage } from './js/localStorage/localStorage';\nimport { createIngredientCardMarkup } from './js/elementsMarkup/ingredientCard';\nimport { createIngredientModalMarkup } from './js/modals/ingredientModalMarkup';\nimport { createIngredientModal } from './js/modals/createModal';\nimport { showMsgNotFound } from './js/utils/utils';\nimport { getFavItemsByIds } from './js/elementsFav/getFavItems';\nimport { setDefaultTheme } from './js/changeColorTheme';\nimport { changeColorTheme} from './js/changeColorTheme';\n\nwindow.addEventListener('load', favIngredientHandler);\nelementsRef.ingredientsListEl.addEventListener('click', ingredientCardHandler);\nelementsRef.searchFormRef.addEventListener(\n  'submit',\n  searchFavIngredientHandler\n);\nelementsRef.themeColorToggleEl.addEventListener('change', () => {\n\n});\n\nasync function favIngredientHandler() {\n  // const filteredIngredientsById = await getIngredientsByStorageIds();\n\n  const filteredIngredientsById = await getFavItemsByIds(\n    constants.favIngredientStorageKey,\n    getIngredientById\n  );\n\n  if (filteredIngredientsById) {\n    displayIngredientsGallery(filteredIngredientsById);\n  }\n\n  // if (!filteredIngredientsById) {\n  //   elementsRef.notFoundTextEl.classList.remove('is-hidden');\n  // } else {\n  //   renderGallery(\n  //     filteredIngredientsById,\n  //     elementsRef.ingredientsListEl,\n  //     createIngredientCardMarkup\n  //   );\n  // }\n}\n\nasync function ingredientCardHandler(e) {\n  if (!e.target.closest('BUTTON')) return;\n\n  const ingredientCardEl = e.target.closest('[data-id]');\n  const cardId = ingredientCardEl.dataset.id;\n\n  const btnEl = e.target.closest('.js-btn-fav');\n  if (btnEl) {\n    updateLocalStorage(cardId, constants.favIngredientStorageKey);\n    ingredientCardEl.remove();\n  }\n  if (e.target.classList.contains('js-btn-more')) {\n    const ingredientInfo = await getIngredientById(cardId);\n    const ingredientModalContent = createIngredientModalMarkup(ingredientInfo);\n\n    createIngredientModal(\n      ingredientModalContent,\n      ingredientInfo[0].idIngredient,\n      constants.favIngredientStorageKey\n    );\n  }\n  if (elementsRef.ingredientsListEl.children.length === 0) {\n    location.reload();\n  }\n}\n\nasync function searchFavIngredientHandler(e) {\n  e.preventDefault();\n\n  const searchQuery = e.target.elements.search.value.trim();\n  if (!searchQuery) {\n    Notiflix.Notify.warning('Please, enter the correct search query');\n    return;\n  }\n\n  // const filteredCocktailsById = await getIngredientsByStorageIds();\n  const filteredCocktailsById = await getFavItemsByIds(\n    constants.favIngredientStorageKey,\n    getIngredientById\n  );\n\n  if (filteredCocktailsById) {\n    const filteredIngredientByName = filteredCocktailsById.filter(cocktail =>\n      cocktail.strIngredient.toUpperCase().includes(searchQuery.toUpperCase())\n    );\n\n    showMsgNotFound(\n      filteredIngredientByName.length,\n      elementsRef.ingredientsListEl,\n      elementsRef.paginationEl\n    );\n\n    displayIngredientsGallery(filteredIngredientByName);\n  } else {\n    Notiflix.Notify.info(\"You haven't any favorite ingredients\");\n  }\n\n  // if (filteredCocktailByName !== 0) {\n  //   renderGallery(\n  //     filteredCocktailByName,\n  //     elementsRef.ingredientsListEl,\n  //     createIngredientCardMarkup\n  //   );\n  //   createPagination(\n  //     filteredCocktailByName,\n  //     elementsRef.ingredientsListEl,\n  //     createIngredientCardMarkup\n  //   );\n  // }\n}\n\nfunction displayIngredientsGallery(filteredIngredient) {\n  if (filteredIngredient !== 0) {\n    createPagination(\n      filteredIngredient,\n      elementsRef.ingredientsListEl,\n      createIngredientCardMarkup\n    );\n\n    renderGallery(\n      filteredIngredient,\n      elementsRef.ingredientsListEl,\n      createIngredientCardMarkup\n    );\n  }\n}\n\n// async function getIngredientsByStorageIds() {\n//   const favIngredientsId = getFromLocalStorage(\n//     constants.favIngredientStorageKey\n//   );\n\n//   console.log(favIngredientsId.length);\n//   showNotFoundMessageOnFavPage(\n//     favIngredientsId.length,\n//     elementsRef.notFoundMsgOnFavPageEl\n//   );\n//   if (favIngredientsId.length === 0) {\n//     return false;\n//   } else {\n//     try {\n//       const ingredientsCardsInfo = [];\n//       for (const id of favIngredientsId) {\n//         const favIngredient = await getIngredientById(id);\n//         ingredientsCardsInfo.push(favIngredient[0]);\n//       }\n//       return ingredientsCardsInfo;\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n// }\n","import { updateFavBtnContent } from '../btnComponent/updateBtnContent';\nimport { constants } from '../constantsStorage/constants';\n\nexport function createIngredientCardMarkup(ingredient) {\n  return `<li class=\"favorite__item\" data-id=\"${ingredient.idIngredient}\">\n        <div class=\"ingredient-card\">\n          <h2 class=\"ingredient-card__title\">${ingredient.strIngredient}</h2>\n          <p class=\"ingredient-card__text\">${ingredient.strType || '***'}</p>\n          <div class=\"buttons-wrap\">\n            <button class=\"button cocktail-card__btn cocktail-card__btn--accent js-btn-more\" type=\"button\">\n              Learn more\n            </button>\n            <button class=\"button cocktail-card__btn cocktail-card__btn--transp cocktail-card__btn--centered js-btn-fav\" type=\"button\">\n              ${updateFavBtnContent(\n                ingredient.idIngredient,\n                constants.favIngredientStorageKey\n              )}\n            </button>\n          </div>\n        </div>\n      </li>`;\n}\n","import { getFromLocalStorage } from '../localStorage/localStorage';\nimport { showMsgNotAddedCocktailOnFavPage } from '../utils/utils';\nimport { elementsRef } from '../elementsRefs/references';\n\n// Get favorite items using stored ids\nexport async function getFavItemsByIds(storageKey, getItems) {\n  const favItemsId = getFromLocalStorage(storageKey);\n\n  showMsgNotAddedCocktailOnFavPage(\n    favItemsId.length,\n    elementsRef.notFoundMsgOnFavPageEl\n  );\n\n  if (favItemsId.length === 0) {\n    return false;\n  } else {\n    try {\n      const itemsInfo = [];\n      for (const id of favItemsId) {\n        const favItems = await getItems(id);\n        itemsInfo.push(favItems[0]);\n      }\n      return itemsInfo;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n"],"names":["$7Y9D8","parcelRequire","$kK2SA","$b90def69a506abc1$export$56f810357ef8c53c","ingredient","idIngredient","strIngredient","strType","updateFavBtnContent","$gGAPY","constants","favIngredientStorageKey","$e6wCE","async","$86acee84560b2359$export$e7e45d3e68739cec","storageKey","getItems","favItemsId","getFromLocalStorage","$jXDaJ","showMsgNotAddedCocktailOnFavPage","length","$4iYcx","elementsRef","notFoundMsgOnFavPageEl","itemsInfo","id","favItems","push","error","console","log","$25a25e7401f3e055$var$displayIngredientsGallery","filteredIngredient","$7ExxV","createPagination","ingredientsListEl","renderGallery","window","addEventListener","filteredIngredientsById","$4emys","getIngredientById","e","target","closest","ingredientCardEl","cardId","dataset","updateLocalStorage","remove","classList","contains","ingredientInfo","ingredientModalContent","$3TGxB","createIngredientModalMarkup","$6bDXm","createIngredientModal","children","location","reload","searchFormRef","preventDefault","searchQuery","elements","search","value","trim","$parcel$interopDefault","Notify","warning","filteredCocktailsById","filteredIngredientByName","filter","cocktail","toUpperCase","includes","showMsgNotFound","paginationEl","info","themeColorToggleEl"],"version":3,"file":"favIngridients.a4a50262.js.map"}