{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0GCAAC,EAAAD,EAAA,S,aAGO,SAASE,EAA2BC,GACzC,MAAO,uCAEsCC,OAFCD,EAAWE,aAAa,4FAG3BD,OADED,EAAWG,cAAc,sDAOxDF,OAN6BD,EAAWI,SAAW,MAAM,qWASzDH,QAHA,EAAAH,EAAAO,qBACAL,EAAWE,aACXI,EAAAC,UAAUC,yBACV,yE,kEDYDC,I,OAAAA,EAAfC,EAAAd,EAAA,CAAAc,EAAAC,GAAAC,MAAA,SAAAC,I,IAGQC,E,mFAAgC,EAAAC,EAAAC,kBACpCV,EAAAC,UAAUC,wBACVS,EAAAC,mB,QAFIJ,EAAuBK,EAAAC,OAM3BC,EAA0BP,G,4CATKQ,MAAAC,KAAAC,U,UAuBpBC,I,OAAAA,EAAff,EAAAd,EAAA,CAAAc,EAAAC,GAAAC,MAAA,SAAAC,EAAqCa,G,IAG7BC,EACAC,EAQEC,EACAC,E,qEAZHJ,EAAEK,OAAOC,QAAQ,UAAS,C,mDAEzBL,EAAmBD,EAAEK,OAAOC,QAAQ,aACpCJ,EAASD,EAAiBM,QAAQC,GAE1BR,EAAEK,OAAOC,QAAQ,kBAE7B,EAAAG,EAAAC,oBAAmBR,EAAQtB,EAAAC,UAAUC,yBACrCmB,EAAiBU,WAEfX,EAAEK,OAAOO,UAAUC,SAAS,eAAc,C,iCACf,EAAAtB,EAAAC,mBAAkBU,G,OAAzCC,EAAcV,EAAAC,KACdU,GAAyB,EAAAU,EAAAC,6BAA4BZ,IAE3D,EAAAa,EAAAC,uBACEb,EACAD,EAAe,GAAG3B,aAClBI,EAAAC,UAAUC,yB,QAGwC,IAAlDoC,EAAAC,YAAYC,kBAAkBC,SAASC,QACzCC,SAASC,S,6CAtBuB5B,MAAAC,KAAAC,U,UA0BrB2B,I,OAAAA,EAAfzC,EAAAd,EAAA,CAAAc,EAAAC,GAAAC,MAAA,SAAAC,EAA0Ca,G,IAGlC0B,EAOAC,EAMEC,E,qEAfR5B,EAAE6B,iBAEIH,EAAc1B,EAAEK,OAAOyB,SAASC,OAAOC,MAAMC,OACnC,C,sBACdjD,EAAAkD,GAASC,OAAOC,QAAQ,0C,2CAKU,EAAA/C,EAAAC,kBAClCV,EAAAC,UAAUC,wBACVS,EAAAC,mB,QAFImC,EAAqBlC,EAAAC,OAMnBkC,EAA2BD,EAAsBU,QAAO,SAAAC,G,OAC5DA,EAAS7D,cAAc8D,cAAcC,SAASd,EAAYa,c,KAG5D,EAAAE,EAAAC,iBACEd,EAAyBN,OACzBJ,EAAAC,YAAYC,kBACZF,EAAAC,YAAYwB,cAGdhD,EAA0BiC,IAE1B5C,EAAAkD,GAASC,OAAOS,KAAK,wC,4CA5BgBhD,MAAAC,KAAAC,U,CA6CzC,SAASH,EAA0BkD,GACN,IAAvBA,KACF,EAAAC,EAAAC,kBACEF,EACA3B,EAAAC,YAAYC,kBACZ/C,IAGF,EAAAyE,EAAAE,eACEH,EACA3B,EAAAC,YAAYC,kBACZ/C,G,uBAnHN4E,OAAOC,iBAAiB,Q,kBAUTnE,EAAoBa,MAAAC,KAAAC,U,IATnCoB,EAAAC,YAAYC,kBAAkB8B,iBAAiB,S,SAgCVlD,G,OAAtBD,EAAqBH,MAAAC,KAAAC,U,IA/BpCoB,EAAAC,YAAYgC,cAAcD,iBACxB,U,SAwDwClD,G,OAA3ByB,EAA0B7B,MAAAC,KAAAC,U,IArDzCoB,EAAAC,YAAYiC,mBAAmBF,iBAAiB,UAAU,WAAM,G","sources":["src/favIngridients.js","src/js/elementsMarkup/ingredientCard.js"],"sourcesContent":["import Notiflix from 'notiflix';\nimport './js/modals/mobileMenu';\nimport { constants } from './js/constantsStorage/constants';\nimport { getIngredientById } from './js/api/api';\nimport {\n  renderGallery,\n  createPagination,\n} from './js/elementsRender/renderGallery';\nimport { elementsRef } from './js/elementsRefs/references';\nimport { updateLocalStorage } from './js/localStorage/localStorage';\nimport { createIngredientCardMarkup } from './js/elementsMarkup/ingredientCard';\nimport { createIngredientModalMarkup } from './js/modals/ingredientModalMarkup';\nimport { createIngredientModal } from './js/modals/createModal';\nimport { showMsgNotFound } from './js/utils/utils';\nimport { getFavItemsByIds } from './js/elementsFav/getFavItems';\nimport { setDefaultTheme } from './js/changeColorTheme';\nimport { changeColorTheme} from './js/changeColorTheme';\n\nwindow.addEventListener('load', favIngredientHandler);\nelementsRef.ingredientsListEl.addEventListener('click', ingredientCardHandler);\nelementsRef.searchFormRef.addEventListener(\n  'submit',\n  searchFavIngredientHandler\n);\nelementsRef.themeColorToggleEl.addEventListener('change', () => {\n\n});\n\nasync function favIngredientHandler() {\n  // const filteredIngredientsById = await getIngredientsByStorageIds();\n\n  const filteredIngredientsById = await getFavItemsByIds(\n    constants.favIngredientStorageKey,\n    getIngredientById\n  );\n\n  if (filteredIngredientsById) {\n    displayIngredientsGallery(filteredIngredientsById);\n  }\n\n  // if (!filteredIngredientsById) {\n  //   elementsRef.notFoundTextEl.classList.remove('is-hidden');\n  // } else {\n  //   renderGallery(\n  //     filteredIngredientsById,\n  //     elementsRef.ingredientsListEl,\n  //     createIngredientCardMarkup\n  //   );\n  // }\n}\n\nasync function ingredientCardHandler(e) {\n  if (!e.target.closest('BUTTON')) return;\n\n  const ingredientCardEl = e.target.closest('[data-id]');\n  const cardId = ingredientCardEl.dataset.id;\n\n  const btnEl = e.target.closest('.js-btn-fav');\n  if (btnEl) {\n    updateLocalStorage(cardId, constants.favIngredientStorageKey);\n    ingredientCardEl.remove();\n  }\n  if (e.target.classList.contains('js-btn-more')) {\n    const ingredientInfo = await getIngredientById(cardId);\n    const ingredientModalContent = createIngredientModalMarkup(ingredientInfo);\n\n    createIngredientModal(\n      ingredientModalContent,\n      ingredientInfo[0].idIngredient,\n      constants.favIngredientStorageKey\n    );\n  }\n  if (elementsRef.ingredientsListEl.children.length === 0) {\n    location.reload();\n  }\n}\n\nasync function searchFavIngredientHandler(e) {\n  e.preventDefault();\n\n  const searchQuery = e.target.elements.search.value.trim();\n  if (!searchQuery) {\n    Notiflix.Notify.warning('Please, enter the correct search query');\n    return;\n  }\n\n  // const filteredCocktailsById = await getIngredientsByStorageIds();\n  const filteredCocktailsById = await getFavItemsByIds(\n    constants.favIngredientStorageKey,\n    getIngredientById\n  );\n\n  if (filteredCocktailsById) {\n    const filteredIngredientByName = filteredCocktailsById.filter(cocktail =>\n      cocktail.strIngredient.toUpperCase().includes(searchQuery.toUpperCase())\n    );\n\n    showMsgNotFound(\n      filteredIngredientByName.length,\n      elementsRef.ingredientsListEl,\n      elementsRef.paginationEl\n    );\n\n    displayIngredientsGallery(filteredIngredientByName);\n  } else {\n    Notiflix.Notify.info(\"You haven't any favorite ingredients\");\n  }\n\n  // if (filteredCocktailByName !== 0) {\n  //   renderGallery(\n  //     filteredCocktailByName,\n  //     elementsRef.ingredientsListEl,\n  //     createIngredientCardMarkup\n  //   );\n  //   createPagination(\n  //     filteredCocktailByName,\n  //     elementsRef.ingredientsListEl,\n  //     createIngredientCardMarkup\n  //   );\n  // }\n}\n\nfunction displayIngredientsGallery(filteredIngredient) {\n  if (filteredIngredient !== 0) {\n    createPagination(\n      filteredIngredient,\n      elementsRef.ingredientsListEl,\n      createIngredientCardMarkup\n    );\n\n    renderGallery(\n      filteredIngredient,\n      elementsRef.ingredientsListEl,\n      createIngredientCardMarkup\n    );\n  }\n}\n\n// async function getIngredientsByStorageIds() {\n//   const favIngredientsId = getFromLocalStorage(\n//     constants.favIngredientStorageKey\n//   );\n\n//   console.log(favIngredientsId.length);\n//   showNotFoundMessageOnFavPage(\n//     favIngredientsId.length,\n//     elementsRef.notFoundMsgOnFavPageEl\n//   );\n//   if (favIngredientsId.length === 0) {\n//     return false;\n//   } else {\n//     try {\n//       const ingredientsCardsInfo = [];\n//       for (const id of favIngredientsId) {\n//         const favIngredient = await getIngredientById(id);\n//         ingredientsCardsInfo.push(favIngredient[0]);\n//       }\n//       return ingredientsCardsInfo;\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   }\n// }\n","import { updateFavBtnContent } from '../btnComponent/updateBtnContent';\nimport { constants } from '../constantsStorage/constants';\n\nexport function createIngredientCardMarkup(ingredient) {\n  return `<li class=\"favorite__item\" data-id=\"${ingredient.idIngredient}\">\n        <div class=\"ingredient-card\">\n          <h2 class=\"ingredient-card__title\">${ingredient.strIngredient}</h2>\n          <p class=\"ingredient-card__text\">${ingredient.strType || '***'}</p>\n          <div class=\"buttons-wrap\">\n            <button class=\"button cocktail-card__btn cocktail-card__btn--accent js-btn-more\" type=\"button\">\n              Learn more\n            </button>\n            <button class=\"button cocktail-card__btn cocktail-card__btn--transp cocktail-card__btn--centered js-btn-fav\" type=\"button\">\n              ${updateFavBtnContent(\n                ingredient.idIngredient,\n                constants.favIngredientStorageKey\n              )}\n            </button>\n          </div>\n        </div>\n      </li>`;\n}\n"],"names":["$bpxeT","parcelRequire","$ekFVM","$5aac9666aace556b$export$56f810357ef8c53c","ingredient","concat","idIngredient","strIngredient","strType","updateFavBtnContent","$a1YPt","constants","favIngredientStorageKey","$f434954faeeded64$var$_favIngredientHandler","$parcel$interopDefault","$2TvXO","mark","_callee","filteredIngredientsById","$8ta90","getFavItemsByIds","$1X4Nb","getIngredientById","_ctx","sent","$f434954faeeded64$var$displayIngredientsGallery","apply","this","arguments","$f434954faeeded64$var$_ingredientCardHandler","e","ingredientCardEl","cardId","ingredientInfo","ingredientModalContent","target","closest","dataset","id","$8gjq0","updateLocalStorage","remove","classList","contains","$jP49R","createIngredientModalMarkup","$6L0EN","createIngredientModal","$1hJrM","elementsRef","ingredientsListEl","children","length","location","reload","$f434954faeeded64$var$_searchFavIngredientHandler","searchQuery","filteredCocktailsById","filteredIngredientByName","preventDefault","elements","search","value","trim","$6JpON","Notify","warning","filter","cocktail","toUpperCase","includes","$5mnqR","showMsgNotFound","paginationEl","info","filteredIngredient","$f187r","createPagination","renderGallery","window","addEventListener","searchFormRef","themeColorToggleEl"],"version":3,"file":"favIngridients.1605bec6.js.map"}